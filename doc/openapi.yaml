openapi: 3.0.3
info:
  title: NextRise API
  version: 0.1.0
  description: |
    Draft OpenAPI specification for the NextRise backend (Next.js route handlers).
    This file was generated from the current source tree. Many response / schema
    details are inferred and should be refined once domain models are finalized.

  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:3000
    description: Local dev server
  - url: https://api.devgoblin.me
    description: Production (placeholder)

tags:
  - name: Auth
  - name: Users
  - name: Events
  - name: Investors
  - name: News
  - name: Partners
  - name: Startups
  - name: Images
  - name: Founders

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: nr_session   # cookieOptions.name in code (adjust if different)

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
    UserPublic:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
      required: [id, email]
    AuthUserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserPublic'
    PagedList:
      type: object
      description: Generic paged list wrapper (inferred)
      properties:
        items:
          type: array
          items:
            type: object
            description: Domain object (refine per collection)
        total:
          type: integer
        skip:
          type: integer
        limit:
          type: integer

security:
  - cookieAuth: []

paths:
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login with email & password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Authenticated
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Session cookie is set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUserResponse'
        '400':
          description: Bad request, missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout:
    post:
      tags: [Auth]
      summary: Logout and clear session cookie
      responses:
        '200': { description: Logged out }

  /api/auth/me:
    get:
      tags: [Auth]
      summary: Get current session user
      responses:
        '200':
          description: Session info
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    allOf:
                      - $ref: '#/components/schemas/UserPublic'
                    nullable: true

  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
      responses:
        '201':
          description: User created
          headers:
            Set-Cookie:
              schema: { type: string }
              description: Session cookie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUserResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  # Core DB direct CRUD (PostgREST wrapper) endpoints
  /api/db/events:
    get:
      tags: [Events]
      summary: List events (direct DB)
      parameters:
        - in: query
          name: select
          schema: { type: string, default: '*' }
          description: PostgREST select clause
      responses:
        '200': { description: OK }
        '500': { description: Error }
    post:
      tags: [Events]
      summary: Create event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Event payload (schema TBD)
      responses:
        '201': { description: Created }
        '400': { description: Invalid body }
        '500': { description: Error }
  /api/db/events/{id}:
    get:
      tags: [Events]
      summary: Get event by id (direct DB)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
        '500': { description: Error }
    patch:
      tags: [Events]
      summary: Update event (partial)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: Updated }
        '400': { description: Invalid body }
        '404': { description: Not found }
        '500': { description: Error }
    delete:
      tags: [Events]
      summary: Delete event
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '404': { description: Not found }
        '500': { description: Error }

  /api/db/founders:
    get:
      tags: [Founders]
      summary: List founders
      parameters:
        - in: query
          name: select
          schema: { type: string, default: '*' }
      responses:
        '200': { description: OK }
        '500': { description: Error }
    post:
      tags: [Founders]
      summary: Create founder
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '201': { description: Created }
        '400': { description: Invalid body }
        '500': { description: Error }
  /api/db/founders/{id}:
    get:
      tags: [Founders]
      summary: Get founder by id
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
        '500': { description: Error }
    patch:
      tags: [Founders]
      summary: Update founder (partial)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: Updated }
        '400': { description: Invalid body }
        '404': { description: Not found }
        '500': { description: Error }
    delete:
      tags: [Founders]
      summary: Delete founder
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '404': { description: Not found }
        '500': { description: Error }

  /api/db/investors:
    get:
      tags: [Investors]
      summary: List investors (direct DB)
      parameters:
        - in: query
          name: select
          schema: { type: string, default: '*' }
      responses:
        '200': { description: OK }
        '500': { description: Error }
    post:
      tags: [Investors]
      summary: Create investor
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '201': { description: Created }
        '400': { description: Invalid body }
        '500': { description: Error }
  /api/db/investors/{id}:
    get:
      tags: [Investors]
      summary: Get investor by id (direct DB)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
        '500': { description: Error }
    patch:
      tags: [Investors]
      summary: Update investor (partial)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: Updated }
        '400': { description: Invalid body }
        '404': { description: Not found }
        '500': { description: Error }
    delete:
      tags: [Investors]
      summary: Delete investor
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '404': { description: Not found }
        '500': { description: Error }

  /api/db/news:
    get:
      tags: [News]
      summary: List news (direct DB)
      parameters:
        - in: query
          name: select
          schema: { type: string, default: '*' }
      responses:
        '200': { description: OK }
        '500': { description: Error }
    post:
      tags: [News]
      summary: Create news item
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '201': { description: Created }
        '400': { description: Invalid body }
        '500': { description: Error }
  /api/db/news/{id}:
    get:
      tags: [News]
      summary: Get news by id (direct DB)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
        '500': { description: Error }
    patch:
      tags: [News]
      summary: Update news (partial)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: Updated }
        '400': { description: Invalid body }
        '404': { description: Not found }
        '500': { description: Error }
    delete:
      tags: [News]
      summary: Delete news
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '404': { description: Not found }
        '500': { description: Error }

  /api/db/partners:
    get:
      tags: [Partners]
      summary: List partners (direct DB)
      parameters:
        - in: query
          name: select
          schema: { type: string, default: '*' }
      responses:
        '200': { description: OK }
        '500': { description: Error }
    post:
      tags: [Partners]
      summary: Create partner
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '201': { description: Created }
        '400': { description: Invalid body }
        '500': { description: Error }
  /api/db/partners/{id}:
    get:
      tags: [Partners]
      summary: Get partner by id (direct DB)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
        '500': { description: Error }
    patch:
      tags: [Partners]
      summary: Update partner (partial)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: Updated }
        '400': { description: Invalid body }
        '404': { description: Not found }
        '500': { description: Error }
    delete:
      tags: [Partners]
      summary: Delete partner
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '404': { description: Not found }
        '500': { description: Error }

  /api/db/startup:
    get:
      tags: [Startups]
      summary: List startups (direct DB)
      parameters:
        - in: query
          name: select
          schema: { type: string, default: '*' }
      responses:
        '200': { description: OK }
        '500': { description: Error }
    post:
      tags: [Startups]
      summary: Create startup
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '201': { description: Created }
        '400': { description: Invalid body }
        '500': { description: Error }
  /api/db/startup/{id}:
    get:
      tags: [Startups]
      summary: Get startup by id (direct DB)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
        '500': { description: Error }
    patch:
      tags: [Startups]
      summary: Update startup (partial)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: Updated }
        '400': { description: Invalid body }
        '404': { description: Not found }
        '500': { description: Error }
    delete:
      tags: [Startups]
      summary: Delete startup
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '404': { description: Not found }
        '500': { description: Error }

  /api/db/user:
    get:
      tags: [Users]
      summary: List users (direct DB)
      parameters:
        - in: query
          name: select
          schema: { type: string, default: '*' }
      responses:
        '200': { description: OK }
        '500': { description: Error }
    post:
      tags: [Users]
      summary: Create user (direct DB)
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '201': { description: Created }
        '400': { description: Invalid body }
        '500': { description: Error }
  /api/db/user/{id}:
    get:
      tags: [Users]
      summary: Get user by id (direct DB)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
        '500': { description: Error }
    patch:
      tags: [Users]
      summary: Update user (partial)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: Updated }
        '400': { description: Invalid body }
        '404': { description: Not found }
        '500': { description: Error }
    delete:
      tags: [Users]
      summary: Delete user
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '404': { description: Not found }
        '500': { description: Error }

  # Generic proxy CRUD for arbitrary table (limited documentation; requires table variable)
  /api/db/{table}:
    get:
      tags: [Events]
      summary: Generic list rows
      parameters:
        - name: table
          in: path
          required: true
          schema: { type: string }
        - in: query
          name: select
          schema: { type: string, default: '*' }
      responses:
        '200': { description: OK }
        '500': { description: Error }
    post:
      tags: [Events]
      summary: Generic create row(s)
      parameters:
        - name: table
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '201': { description: Created }
        '400': { description: Invalid body }
        '500': { description: Error }
  /api/db/{table}/{id}:
    get:
      tags: [Events]
      summary: Generic get row
      parameters:
        - name: table
          in: path
          required: true
          schema: { type: string }
        - name: id
          in: path
          required: true
          schema: { type: string }
        - in: query
          name: pk
          schema: { type: string, default: id }
        - in: query
          name: select
          schema: { type: string, default: '*' }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
        '500': { description: Error }
    patch:
      tags: [Events]
      summary: Generic update row
      parameters:
        - name: table
          in: path
          required: true
          schema: { type: string }
        - name: id
          in: path
          required: true
          schema: { type: string }
        - in: query
          name: pk
          schema: { type: string, default: id }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: Updated }
        '400': { description: Invalid body }
        '404': { description: Not found }
        '500': { description: Error }
    delete:
      tags: [Events]
      summary: Generic delete row
      parameters:
        - name: table
          in: path
          required: true
          schema: { type: string }
        - name: id
          in: path
          required: true
          schema: { type: string }
        - in: query
          name: pk
          schema: { type: string, default: id }
      responses:
        '200': { description: Deleted }
        '404': { description: Not found }
        '500': { description: Error }

# TODO (manual completion needed): Add schemas for each domain object (Event, Investor, News, Partner, Startup, User detail) once the upstream API data shape is defined.
